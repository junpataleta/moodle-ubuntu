#######################################
# The file is used to handle Moodle sites served from a sub folder of the domain.
#######################################
<VirtualHost *:80>
    #######################################
    # Things you need to set up before using this configuration:
    # - the path to the location that all of your Moodle sites are in
    # - the hostname of your site
    #######################################

    #######################
    # Set the root directory for your Moodle sites.
    #######################
    Define DOCROOT /home/moodle/www

    # Update your configuration to match the host name(s) that you use.
    # You can have as many as you like and/or require.
    #######################
    # UPDATE ME
    ServerName localhost
    #######################

    # You can add any aliases you like here too.
    # ServerAlias myhostname.example.com
    # ServerAlias myotherhostname.example.com

    #######################################
    # End of configuration.
    #######################################

    DocumentRoot "${DOCROOT}"

    # Configure the directory configuration.
    <Directory "${DOCROOT}">
        # Do not allow directory listing.
        # Allow following symbolic links.
        Options FollowSymLinks

        # Do not allow .htaccess files to override settings.
        AllowOverride None

        # Allow access to all users.
        Require all granted

        <IfModule dir_module>
            # Set the index file for the Moodle Root.
            DirectoryIndex index.php index.html
        </IfModule>

        <FilesMatch \.php$>
            SetHandler application/x-httpd-php
        </FilesMatch>
    </Directory>

    <IfModule mod_rewrite.c>
        # Enable rewrite logging for debugging purposes.
        # LogLevel warn mod_rewrite.c:trace7

        # Use mod_rewrite to handle requests.
        # We cannot use FallbackResource here because we need to check if the /public folder exists.
        RewriteEngine On

        #####################
        # Ruleset 1.
        # Check if this request is for a site which has a public folde.r
        #####################
        # Check whether the requested file exists as-is.
        RewriteCond %{SCRIPT_FILENAME} !-f
        # Extract the top-level folder from the request URI. This is the Moodle site name.
        RewriteCond %{REQUEST_FILENAME} ^/([^/]+)(/.*)?$
        # If the public folder exists for that site, rewrite the request to go through it.
        RewriteCond %{DOCUMENT_ROOT}/%1/public -d
        RewriteRule ^/([^/]+)(/.*)?$ /$1/public$2 [C]   # Rewrite to public folder - CHAIN to the next rule.

            #####################
            # Ruleset 1.1.
            # The public folder exists.
            # See if we can access the file directly.
            # If not, rewrite to the r.php (router) inside the site/public folder.
            #####################
            # Extract the file path before the .php extension, if any (pathinfo removed).
            RewriteCond %{REQUEST_FILENAME} ^(.+\.php)?(/.*)?$
            # AND the requested file does not exist as-is.
            # The %1 is the file path before the .php extension, if any (pathinfo removed).
            # It is fetched from the RewriteCond above.
            # %2 is the pathinfo, if any.
            RewriteCond %{DOCUMENT_ROOT}%1 !-f
            # AND the requested URI is not a file.
            # $1 is the site name, $2 is the file path.
            # These come from the RewriteRule below that this rule applies to.
            RewriteCond %{DOCUMENT_ROOT}/$1$2 !-f
            # AND the requested URI is not a directory.
            RewriteCond %{DOCUMENT_ROOT}/$1$2 !-d
            # Rewrite the request to go through the r.php (router) in the site/public folder.
            RewriteRule ^/([^/]+)(/.*)?$ /$1/public/r.php [L]

        #####################
        # Rule set 2.
        # The public folder does _not_ exist.
        # See if we can access the file directly.
        # If not, rewrite to the r.php (router) in the site folder.
        #####################
        # Check whether the requested file exists as-is.
        RewriteCond %{SCRIPT_FILENAME} !-f
        # Extract the top-level folder from the request URI. This is the Moodle site name.
        RewriteCond %{REQUEST_FILENAME} ^/([^/]+)(/.*)?$
        # If the public folder DOES NOT exist for that site.
        RewriteCond %{DOCUMENT_ROOT}/%1/public !-d
        # Extract the file path before the .php extension, if any (pathinfo removed).
        RewriteCond %{REQUEST_FILENAME} ^(.+\.php)?(/.*)?$
        # AND the requested file does not exist as-is.
        # The %1 is the file path before the .php extension, if any (pathinfo removed).
        # It is fetched from the RewriteCond above.
        # %2 is the pathinfo, if any.
        RewriteCond %{DOCUMENT_ROOT}%1 !-f
        # AND the requested URI is not a file.
        # $1 is the site name, $2 is the file path.
        # These come from the RewriteRule below that this rule applies to.
        RewriteCond %{DOCUMENT_ROOT}/$1$2 !-f
        # AND the requested URI is not a directory.
        RewriteCond %{DOCUMENT_ROOT}/$1$2 !-d
        # Rewrite the request to go through the r.php (router) in the site folder.
        RewriteRule ^/([^/]+)(/.*)?$ /$1/r.php [L]
    </IfModule>
</VirtualHost>
